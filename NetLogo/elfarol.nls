to ef-global-init
  set ef-memory-size 10
  set ef-history n-values (ef-memory-size * 2) [random 100]
  set ef-number-strategies 100
end

to ef-init
  set strategies n-values ef-number-strategies [ef-random-strategy]
  set best-strategy first strategies
  ef-update-strategies
end

to-report ef-random-strategy
  report n-values (ef-memory-size + 1) [1.0 - random-float 2.0]
end

to ef-learning-updates
  if not (current-round > 1 and Learning-Methodology = "Bounded Rationality") [ stop ] 
  let attendance ((total-protection / No-of-Peers) * 100)
  set ef-history fput attendance but-last ef-history
  ask peers [ ef-update-strategies ]
end


to ef-update-strategies
  ;; initialize best-score to a maximum, which is the lowest possible score
  let best-score ef-memory-size * 100 + 1
  foreach strategies [ the-strategy ->
    let score 0
    let week 1
    repeat ef-memory-size [
      set prediction ef-predict-attendance the-strategy sublist ef-history week (week + ef-memory-size)
      set score score + abs (item (week - 1) ef-history - prediction)
      set week week + 1
    ]
    if (score <= best-score) [
      set best-score score
      set best-strategy the-strategy
    ]
  ]
end

to-report ef-predict-attendance [strategy subhistory]
  ;; the first element of the strategy is the constant, c, in the prediction formula.
  ;; one can think of it as the the agent's prediction of the bar's attendance
  ;; in the absence of any other data
  ;; then we multiply each week in the history by its respective weight
  report 100 * first strategy + sum (map [ [weight week] -> weight * week ] butfirst strategy subhistory)
end

to-report ef-learning
  set prediction ef-predict-attendance best-strategy sublist ef-history 0 ef-memory-size
  report (prediction <= Votes-Required)  ;; true or false
end