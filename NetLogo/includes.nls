extensions [ rnd ]
__includes [ "NetLogo/procs.nls" "NetLogo/learning.nls" "NetLogo/elfarol.nls"]

;; define universal breeds
breed [peers peer]
;; breed [victims victim]
breed [servers server]
breed [attackers attacker]
directed-link-breed [server-cons server-con]
directed-link-breed [attacker-cons attacker-con]
undirected-link-breed [peer-cons peer-con]

attackers-own[
  blocks-to-attack
]

peers-own [
  peer-id 
  con-delay 
  allowed-link-no 
  protected?
  is-down 
  block
  block-voters
  chain
  roundchain
  
  ;; Utility Related
  benefit-puoc
  prev-f
  effective-availability
  prev-peer-reputation
  peer-reputation
  
  
  ;; Reputation Maximization based parameters
  valid-probability
  mixed-strategy-prob
  reputation-limit
  
  ;; Regret with history
  regrets
  
  ;; Bounded Rationality Related
  strategies      ;; list of strategies
  best-strategy   ;; index of the current best strategy
  prediction      ;; current prediction of the bar attendance
]


globals [ 
  bserver 
  battacker 
  current-round
  current-round-mu
  overall-block
  last-proposed-block
  current-block
  current-block-start-time
  current-block-proposer-id
  init?
  total-protection
  avg-reputation-limit
    
  ;; Calc Related
  no-of-votes-required
  
  ;; Bounded Rationality Related
  ef-history
  ef-memory-size
  ef-number-strategies

  ;; Timing related
  ;; block-timeout block-start-time ;; for ticks (Not used atm)
  peer-breathe-time
  ;; Visualization Related
  subdue-color ;;  To make non-neighbour links less visible
]


to console-log [logline]
  ;; output-print(word "LOG - " logline)
end

to export-env-var [fileloc]
  file-open fileloc
  let sec1 (word  No-of-Peers "," Votes-Required "," Block-Timeout "," Benefit-Per-Unit-Of-Cost "," Heterogeneous-Cost "," Cost-Std-Dev "," Min-Attack-Probability "," Learning-Methodology "," Rounds ",")
  let sec2 (word Min-Con-Delay "," Max-Con-Delay "," Min-Peer-Cons "," Max-Peer-Cons)
  file-print "No-of-Peers,Votes-Required,Block-Timeout,Benefit-Per-Unit-Of-Cost,Heterogeneous-Cost,Cost-Std-Dev,Min-Attack-Probability,Learning-Methodology,Rounds,Min-Con-Delay,Max-Con-Delay,Min-Peer-Cons,Max-Peer-Cons"
  file-print (word sec1 sec2) 
  file-close
end

to export-experiment
  let ts date-and-time
  let fsuffix (word  (substring ts 16 18) "_" (substring ts 0 2) "_" (substring ts 3 5) "_" (substring ts 6 8) "_" (substring ts 9 12) "_" (substring ts 13 16) ) 
  let exp_name (word behaviorspace-run-number "_" behaviorspace-experiment-name "_" fsuffix)
  export-interface (word "output/img_" exp_name ".png")
  export-env-var (word "output/img_env_" exp_name ".csv")
  export-plot "Block Acceptance" (word "output/tbl_ba_" exp_name ".csv")
  export-plot "Total Protection" (word "output/tbl_tp_" exp_name ".csv")
  export-plot "Average Reputations" (word "output/tbl_rep_" exp_name ".csv")
  export-plot "Average Utilities" (word "output/tbl_util_" exp_name ".csv")
  ;; export-all-plots (word "output/plots_" exp_name ".csv")
  output-print(word "Completed: " exp_name)
  ;; repeat 3 [ beep wait 0.1 ]
end

