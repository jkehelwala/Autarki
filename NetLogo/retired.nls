to force-timeout-for-block ;; TODO (NOT Used) Should not be possible at individual peers (But if the loop is stuck without tick-advance cannot enforce this elsewhere)
  if ticks > (block-start-time + block-timeout) [ reschedule_events 5 ]
end


to create-global-chain-per-round
      let global-chain-round []
      ask peers [
        let glob-keys map first global-chain-round
        let peer-keys map first (sublist chain position round-start-block-id chain length chain)
        let missing-keys filter [ i -> not member? i glob-keys ] peer-keys
        foreach missing-keys [ x ->  set global-chain-round lput (item (position x chain) chain) global-chain-round ]
      ]
end


;; foreach n-values No-of-Peers [ random-normal 1.0 Cost-Std-Dev ] [ i -> write(word i ", ")  ]


;; handling error where extra blocks are recorded during the round round
  if length list-of-voter-lists > No-of-Peers [
    console-log("func(rm-set-reputation) - Invalid number of blocks recorded.")
    set list-of-voter-lists map last chain
  ]


  to synchronize-current-round-chain-2
  ask peers [
    let parent-subchain-keys map first chain
    let list-of-votes map last chain
    ask other peers [
      let peer-subchain-keys map first chain
      let missing-keys filter [ i -> not member? i parent-subchain-keys ] peer-subchain-keys
      ifelse (length missing-keys + length list-of-votes) > No-of-Peers [ console-log(" Filtering error. Skipping synchronization.") ]
      [ ;; else
        foreach missing-keys [ x ->
          let missing-item item (position x map first chain) chain
          set list-of-votes lput (last missing-item) list-of-votes
        ]
      ]
    ]
    set roundchain lput list-of-votes roundchain
  ]
end
