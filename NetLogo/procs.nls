
to setup
  clear-all
  init-globals
  set-constants
  setup-peers
  reset-ticks ;; start the clock
  export-env-var
  initiate_round
end

to init-globals
  set last-proposed-block ""
  set overall-block 0
  set total-protection 0
  set avg-reputation-limit 0
end

to set-constants
  set no-of-votes-required ceiling( No-of-Peers  * ( Votes-Required / 100 ) )
  set-default-shape peers "a_peer"
  ;; Constant setup
  set subdue-color 4
  set current-round 0
  set current-block-proposer-id ""
  ;; Timing setup (TODO: Move to UI if necessary)
  set peer-breathe-time 2
end

to scheduled-events
  if init? [stop]
  if ticks mod Block-Timeout = 0 [ initiate_block ]
  ask peers [
    if ticks mod con-delay = 0 [ push-peer-block ]
  ]
end

to-report end-simulation
  report current-round > Rounds
end

to go
  if end-simulation [ 
    ;; export-experiment
    stop ;; Stopping forever button
  ]
  tick
  scheduled-events
end

to-report attack_tolerance_data ;; Possibility of protection being enough for the block to be voted in 
  report (No-of-Peers - no-of-votes-required ) >= count peers with [is-down]
  ;; report (word count peers with [is-down] "/" (No-of-Peers - no-of-votes-required ) )
end

to setup-peers
  ;; Creating Servers
  create-servers 1 [
    set color blue
    set shape "a_server"
    setxy -15 0
  ]
  create-attackers 1 [
    set color orange
    set shape "monster"
    setxy 15 0
  ]
  set bserver one-of servers
  set battacker one-of attackers
  
  let benefit-list benefit-assignment
  ;; Creating Peers
  create-peers No-of-Peers [
    ;; set color turquoise
    setxy random-pxcor random-pycor
    set peer-id (word "p_" who)
    set benefit-puoc first benefit-list
    set benefit-list remove-item 0 benefit-list ;; pop benefit
    set block ""
    set block-voters []
    set chain []
    ;; set roundchain []
    set lastchain []
    set protected? False
    set is-down False
    set con-delay Min-Con-Delay +  random (Max-Con-Delay - Min-Con-Delay)
    set allowed-link-no Min-Peer-Cons + random (Max-Peer-Cons - Min-Peer-Cons)
    
    set effective-availability 0
    set prev-peer-reputation 1
    set peer-reputation 0
    set reputation-limit 0
    set prev-f 0

    set valid-probability False ;; Reputation Optimization    
  ]
  ask bserver [
    create-server-cons-to other peers [
      set color blue - subdue-color
      ;; set delay [con-delay] of other-end
    ]
    ;; ask my-out-server-cons []
  ]
  ask battacker [
    create-attacker-cons-to other peers [
      ;; set delay [con-strength] of other-end
      set color orange - subdue-color
    ]
  ]
  ask peers [
    let available-links [allowed-link-no] of self - (count my-peer-cons ) ;; leftover links than the default server/attacker connections
    if available-links > 0 [
      create-peer-cons-with n-of available-links other peers
    ]
    ask peer-cons [
      set color turquoise
      ;; set delay min(list [con-strength] of end1 [con-strength] of end2)
    ]
  ]
end

to initiate_round
  set init? true
  set current-round (current-round + 1)
  reset-global-chart-var
  if end-simulation [
    console-log("Round number reached. Simulation will stop soon.")
    stop
  ]
  set current-block 0
  remove_attacker_influence
  if current-round > 1 [
    synchronize-current-round-chain
    set-total-protection
    ask peers [ 
      set prev-peer-reputation peer-reputation
      set-reputation
      update-average-graph
      set chain [] 
    ]
    write-plots-to-export-file
  ]
  ask peers [ set-peer-protection-decision ]  
  ask battacker [ set-list-of-blocks-to-attack  ]
  set init? false
  tick-advance (Block-Timeout - (ticks mod Block-Timeout) + 1 )
end

to set-total-protection
  set total-protection count peers with [protected?] ;; This value could change depending on Block-Timeout based vote exclusions
  set g-total-protection-percentage ( ( total-protection / No-of-Peers ) * 100 )
  set-reputation-validity-plot
end

to set-reputation-validity-plot
  set g-validity-count -1
  if reputation-based? [
    let valcount count peers with [valid-probability]
    set g-validity-count ( ( valcount / No-of-Peers ) * 100 )
  ]
end

to initiate_block
  if overall-block > 0 [  
    ask peers [ finalize-proposed-block ]
    console-log(word "Finished: Round: " current-round " Block: " current-block " Overall Block: " overall-block " Attack Tolerance: " attack_tolerance_data)
    ;; plot-vote-precentage 
  ]
  if (current-block + 1) > No-of-Peers [
    initiate_round
    stop
  ]
  set current-block (current-block + 1)
  set overall-block (overall-block + 1)
  ;; console-log(word "Started: Round: " current-round " Block: " current-block " Overall Block: " overall-block)
  remove_attacker_influence
  if member? current-block [blocks-to-attack] of battacker [
    ask battacker [
      ask attacker-con-neighbors [ attack_agent ]
    ]
  ]
  
  ;; Confirm at least one proposer is available (Limitation)
  let valid-proposers count peers with  [not is-down and peer-id != current-block-proposer-id ]
  if valid-proposers = 0 [
    ask one-of peers with  [peer-id != current-block-proposer-id ] [ remove_attacker_influence_for_peer ]
  ]
  
  ask one-of peers with  [not is-down and peer-id != current-block-proposer-id ] [ ;; ask new proposer
    set current-block-proposer-id peer-id
    set current-block-start-time ticks
    set block (word "b_" overall-block "_" current-block-proposer-id)
    set last-proposed-block block
    add-block-vote current-block-proposer-id
    push-peer-block
  ]
end

to receive-block [proposed-block voter-list]
  if is-down [ stop ]
  if empty? proposed-block or empty? voter-list [ stop ]
  if empty? block [
    set block proposed-block
  ]
  set block-voters sentence block-voters voter-list
  set block-voters remove-duplicates block-voters
  if not empty? block and proposed-block = block [
    add-block-vote peer-id
  ]
  ;; console-log(word "Received " block " " voter-list)
end


to push-peer-block ;; turtle-method
  if empty? block or is-down [ stop ]
  let proposed-block block
  let voter-list block-voters
  ask out-peer-con-neighbors [
    receive-block proposed-block voter-list
  ]
end

to finalize-proposed-block ;; turtle-method
  if not is-down [ 
    if length block-voters > no-of-votes-required [
      set chain lput (list block block-voters) chain 
    ]
  ]
  set block ""
  set block-voters []
end

to remove_attacker_influence
  ask peers [ remove_attacker_influence_for_peer ]
end

to remove_attacker_influence_for_peer
  if not is-down [ stop ]
  set is-down False
  set shape "a_peer"
end

to synchronize-current-round-chain
  let added-blocks []
  ask peers [ set added-blocks sentence added-blocks map first chain ]
  set added-blocks remove-duplicates added-blocks
  ask peers [
    let list-of-votes map last chain
    let parent-chain-keys map first chain
    let missing-keys filter [ i -> not (member? i parent-chain-keys)  ] added-blocks
    if (length missing-keys + length list-of-votes) > No-of-Peers [ 
      console-log(word " Filtering error. Skipping synchronization. " length missing-keys  " " length list-of-votes ) 
    ]
    foreach missing-keys [ x -> 
      ask one-of peers with  [position x map first chain != false ] [
        let missing-item item (position x map first chain) chain
        set list-of-votes lput (last missing-item) list-of-votes
      ]  
    ]
    ;; set roundchain lput list-of-votes roundchain
    set lastchain list-of-votes
  ]
end


to attack_agent
  if not protected? [
    set is-down True
    set shape "a_victim"
  ] 
end

to add-block-vote [ voter ] ;; turtle-method
  if not member? voter block-voters [
     set block-voters lput voter block-voters
  ]
end

to set-list-of-blocks-to-attack ;; attacker-method
  set current-round-mu ( Min-Attack-Probability + random-float (0.99 - Min-Attack-Probability) )
  let no-of-blocks-to-attack ceiling(current-round-mu * No-of-Peers) ;; or Floor?
  set blocks-to-attack []
  while [length blocks-to-attack < no-of-blocks-to-attack]
  [ 
    let b-no 1 + random No-of-Peers
    if not member? b-no blocks-to-attack [
     set blocks-to-attack lput b-no blocks-to-attack
    ]
  ]
end

to set-peer-protection-decision ;; peer method
  set protected? get-protection
end


to-report benefit-assignment
  if not Heterogeneous-Cost [ report n-values No-of-Peers [ Benefit-Per-Unit-Of-Cost ] ]  ;; Homogeneous cost
  report map [ i -> Benefit-Per-Unit-Of-Cost / i ] n-values No-of-Peers [ random-normal 1.0 Cost-Std-Dev ]  ;; Heterogenous cost
end

to-report reputation-based?
  if length Learning-Methodology < 10 [ report false ]
  if substring Learning-Methodology 0 10 = "Reputation" [ report true ]
  report false
end

to update-average-graph
  let avg-rep (sum [peer-reputation] of peers / No-of-Peers)
  let avg-util ( sum [get-utility protected?] of peers / No-of-Peers )
  set g-avg-reputation avg-rep
  if reputation-based? [
    set avg-reputation-limit (sum [reputation-limit] of peers / No-of-Peers)
    set g-avg-reputation-limit avg-reputation-limit
  ]
  set g-avg-utility avg-util
end